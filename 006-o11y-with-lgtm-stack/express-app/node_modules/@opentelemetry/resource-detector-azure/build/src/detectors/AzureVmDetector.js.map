{"version":3,"file":"AzureVmDetector.js","sourceRoot":"","sources":["../../../src/detectors/AzureVmDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as http from 'http';\n\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  ResourceDetector,\n  DetectedResource,\n  DetectedResourceAttributes,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_CLOUD_PLATFORM,\n  CLOUD_PLATFORM_VALUE_AZURE_VM,\n  ATTR_CLOUD_PROVIDER,\n  CLOUD_PROVIDER_VALUE_AZURE,\n  ATTR_CLOUD_REGION,\n  ATTR_HOST_ID,\n  ATTR_HOST_NAME,\n  ATTR_HOST_TYPE,\n  ATTR_OS_VERSION,\n} from '../semconv';\nimport {\n  CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE,\n  AZURE_VM_METADATA_HOST,\n  AZURE_VM_METADATA_PATH,\n  AZURE_VM_SCALE_SET_NAME_ATTRIBUTE,\n  AZURE_VM_SKU_ATTRIBUTE,\n  AzureVmMetadata,\n} from '../types';\n\n/**\n * The AzureVmDetector can be used to detect if a process is running in an Azure VM.\n * @returns a {@link Resource} populated with data about the environment or an empty Resource if detection fails.\n */\nclass AzureVmResourceDetector implements ResourceDetector {\n  detect(): DetectedResource {\n    const dataPromise = context.with(suppressTracing(context.active()), () =>\n      this.getAzureVmMetadata()\n    );\n\n    const attrNames = [\n      AZURE_VM_SCALE_SET_NAME_ATTRIBUTE,\n      AZURE_VM_SKU_ATTRIBUTE,\n      ATTR_CLOUD_PLATFORM,\n      ATTR_CLOUD_PROVIDER,\n      ATTR_CLOUD_REGION,\n      CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE,\n      ATTR_HOST_ID,\n      ATTR_HOST_NAME,\n      ATTR_HOST_TYPE,\n      ATTR_OS_VERSION,\n    ];\n\n    const attributes = {} as DetectedResourceAttributes;\n    attrNames.forEach(name => {\n      // Each resource attribute is determined asynchronously in _gatherData().\n      attributes[name] = dataPromise.then(data => data[name]);\n    });\n\n    return { attributes };\n  }\n\n  async getAzureVmMetadata(): Promise<DetectedResourceAttributes> {\n    try {\n      const options = {\n        host: AZURE_VM_METADATA_HOST,\n        path: AZURE_VM_METADATA_PATH,\n        method: 'GET',\n        timeout: 5000,\n        headers: {\n          Metadata: 'True',\n        },\n      };\n      const metadata: AzureVmMetadata = await new Promise((resolve, reject) => {\n        const timeoutId = setTimeout(() => {\n          req.destroy();\n          reject(new Error('Azure metadata service request timed out.'));\n        }, 1000);\n\n        const req = http.request(options, res => {\n          clearTimeout(timeoutId);\n          const { statusCode } = res;\n          res.setEncoding('utf8');\n          let rawData = '';\n          res.on('data', chunk => (rawData += chunk));\n          res.on('end', () => {\n            if (statusCode && statusCode >= 200 && statusCode < 300) {\n              try {\n                resolve(JSON.parse(rawData));\n              } catch (error) {\n                reject(error);\n              }\n            } else {\n              reject(\n                new Error('Failed to load page, status code: ' + statusCode)\n              );\n            }\n          });\n        });\n        req.on('error', err => {\n          clearTimeout(timeoutId);\n          reject(err);\n        });\n        req.end();\n      });\n\n      const attributes = {\n        [AZURE_VM_SCALE_SET_NAME_ATTRIBUTE]: metadata['vmScaleSetName'],\n        [AZURE_VM_SKU_ATTRIBUTE]: metadata['sku'],\n        [ATTR_CLOUD_PLATFORM]: CLOUD_PLATFORM_VALUE_AZURE_VM,\n        [ATTR_CLOUD_PROVIDER]: CLOUD_PROVIDER_VALUE_AZURE,\n        [ATTR_CLOUD_REGION]: metadata['location'],\n        [CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE]: metadata['resourceId'],\n        [ATTR_HOST_ID]: metadata['vmId'],\n        [ATTR_HOST_NAME]: metadata['name'],\n        [ATTR_HOST_TYPE]: metadata['vmSize'],\n        [ATTR_OS_VERSION]: metadata['version'],\n      };\n      return attributes;\n    } catch (err: any) {\n      diag.debug(\n        'AzureVmResourceDetector: not running in an Azure VM:',\n        err.message\n      );\n      return {};\n    }\n  }\n}\n\nexport const azureVmDetector = new AzureVmResourceDetector();\n"]}