{"version":3,"file":"semconv.js","sourceRoot":"","sources":["../../src/semconv.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH;;;;GAIG;AAEH;;;;GAIG;AACU,QAAA,2BAA2B,GAAG,wBAAiC,CAAC;AAE7E;;;;GAIG;AACU,QAAA,iBAAiB,GAAG,cAAuB,CAAC;AAEzD;;;;;;GAMG;AACU,QAAA,yBAAyB,GAAG,sBAA+B,CAAC;AAEzE;;;;;;GAMG;AACU,QAAA,iCAAiC,GAC5C,4BAAqC,CAAC;AAExC;;;;;;GAMG;AACU,QAAA,kCAAkC,GAC7C,6BAAsC,CAAC;AAEzC;;;;;;GAMG;AACU,QAAA,iCAAiC,GAC5C,4BAAqC,CAAC;AAExC;;;;;;GAMG;AACU,QAAA,iCAAiC,GAC5C,4BAAqC,CAAC;AAExC;;;;;;GAMG;AACU,QAAA,iCAAiC,GAC5C,4BAAqC,CAAC;AAExC;;;;;;GAMG;AACU,QAAA,iCAAiC,GAC5C,4BAAqC,CAAC;AAExC;;;;;;GAMG;AACU,QAAA,oCAAoC,GAC/C,+BAAwC,CAAC;AAE3C;;;;;;GAMG;AACU,QAAA,4BAA4B,GAAG,uBAAgC,CAAC;AAE7E;;;;;;GAMG;AACU,QAAA,mCAAmC,GAC9C,8BAAuC,CAAC;AAE1C;;;;;;GAMG;AACU,QAAA,uBAAuB,GAAG,kBAA2B,CAAC;AAEnE;;;;;;GAMG;AACU,QAAA,6BAA6B,GAAG,wBAAiC,CAAC;AAE/E;;;;;;GAMG;AACU,QAAA,4BAA4B,GAAG,uBAAgC,CAAC;AAE7E;;;;;;GAMG;AACU,QAAA,mCAAmC,GAAG,QAAiB,CAAC;AAErE;;;;;;GAMG;AACU,QAAA,iCAAiC,GAAG,MAAe,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n\n/**\n * The state of event loop time.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_NODEJS_EVENTLOOP_STATE = 'nodejs.eventloop.state' as const;\n\n/**\n * The type of garbage collection.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_V8JS_GC_TYPE = 'v8js.gc.type' as const;\n\n/**\n * The name of the space type of heap memory.\n *\n * @note Value can be retrieved from value `space_name` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_V8JS_HEAP_SPACE_NAME = 'v8js.heap.space.name' as const;\n\n/**\n * Event loop maximum delay.\n *\n * @note Value can be retrieved from value `histogram.max` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_DELAY_MAX =\n  'nodejs.eventloop.delay.max' as const;\n\n/**\n * Event loop mean delay.\n *\n * @note Value can be retrieved from value `histogram.mean` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_DELAY_MEAN =\n  'nodejs.eventloop.delay.mean' as const;\n\n/**\n * Event loop minimum delay.\n *\n * @note Value can be retrieved from value `histogram.min` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_DELAY_MIN =\n  'nodejs.eventloop.delay.min' as const;\n\n/**\n * Event loop 50 percentile delay.\n *\n * @note Value can be retrieved from value `histogram.percentile(50)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_DELAY_P50 =\n  'nodejs.eventloop.delay.p50' as const;\n\n/**\n * Event loop 90 percentile delay.\n *\n * @note Value can be retrieved from value `histogram.percentile(90)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_DELAY_P90 =\n  'nodejs.eventloop.delay.p90' as const;\n\n/**\n * Event loop 99 percentile delay.\n *\n * @note Value can be retrieved from value `histogram.percentile(99)` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_DELAY_P99 =\n  'nodejs.eventloop.delay.p99' as const;\n\n/**\n * Event loop standard deviation delay.\n *\n * @note Value can be retrieved from value `histogram.stddev` of [`perf_hooks.monitorEventLoopDelay([options])`](https://nodejs.org/api/perf_hooks.html#perf_hooksmonitoreventloopdelayoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_DELAY_STDDEV =\n  'nodejs.eventloop.delay.stddev' as const;\n\n/**\n * Cumulative duration of time the event loop has been in each state.\n *\n * @note Value can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_TIME = 'nodejs.eventloop.time' as const;\n\n/**\n * Event loop utilization.\n *\n * @note The value range is [0.0, 1.0] and can be retrieved from [`performance.eventLoopUtilization([utilization1[, utilization2]])`](https://nodejs.org/api/perf_hooks.html#performanceeventlooputilizationutilization1-utilization2)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_NODEJS_EVENTLOOP_UTILIZATION =\n  'nodejs.eventloop.utilization' as const;\n\n/**\n * Garbage collection duration.\n *\n * @note The values can be retrieved from [`perf_hooks.PerformanceObserver(...).observe({ entryTypes: ['gc'] })`](https://nodejs.org/api/perf_hooks.html#performanceobserverobserveoptions)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_V8JS_GC_DURATION = 'v8js.gc.duration' as const;\n\n/**\n * Total heap memory size pre-allocated.\n *\n * @note The value can be retrieved from value `space_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_V8JS_MEMORY_HEAP_LIMIT = 'v8js.memory.heap.limit' as const;\n\n/**\n * Heap Memory size allocated.\n *\n * @note The value can be retrieved from value `space_used_size` of [`v8.getHeapSpaceStatistics()`](https://nodejs.org/api/v8.html#v8getheapspacestatistics)\n *\n * @experimental This metric is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const METRIC_V8JS_MEMORY_HEAP_USED = 'v8js.memory.heap.used' as const;\n\n/**\n * Enum value \"active\" for attribute {@link ATTR_NODEJS_EVENTLOOP_STATE}.\n *\n * Active time.\n *\n * @experimental This enum value is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const NODEJS_EVENTLOOP_STATE_VALUE_ACTIVE = 'active' as const;\n\n/**\n * Enum value \"idle\" for attribute {@link ATTR_NODEJS_EVENTLOOP_STATE}.\n *\n * Idle time.\n *\n * @experimental This enum value is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const NODEJS_EVENTLOOP_STATE_VALUE_IDLE = 'idle' as const;\n"]}